<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Masale's workflow on Langium</title><link>/docs/learn/workflow/</link><description>Recent content in Masale's workflow on Langium</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/learn/workflow/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Install Yeoman</title><link>/docs/learn/workflow/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/learn/workflow/install/</guid><description>Before diving into Langium itself, let&amp;rsquo;s get your environment ready for development:
You have a working Node environment with version 16 or higher. Install Yeoman and the Langium extension generator. npm i -g yo generator-langium For our getting started example, we would also recommend you to install the latest version of vscode.</description></item><item><title>2. Scaffold a Langium project</title><link>/docs/learn/workflow/scaffold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/learn/workflow/scaffold/</guid><description>To create your first working DSL, execute the Yeoman generator:
&amp;gt; yo langium ┌─────┐ ─┐ ┌───┐ │ ╶─╮ ┌─╮ ╭─╮ ╷ ╷ ╷ ┌─┬─╮ │ ,´ │ ╭─┤ │ │ │ │ │ │ │ │ │ │ │╱ ╰─ ╰─┘ ╵ ╵ ╰─┤ ╵ ╰─╯ ╵ ╵ ╵ ` ╶─╯ Welcome to Langium! This tool generates a VS Code extension with a &amp;quot;Hello World&amp;quot; language to get started quickly. The extension name is an identifier used in the extension marketplace or package registry.</description></item><item><title>3. Write the grammar</title><link>/docs/learn/workflow/write_grammar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/learn/workflow/write_grammar/</guid><description>Your Langium project is now setup and ready to be used. The next step is to define the grammar of your language. The grammar is the most important part of your language definition. It defines the syntax of your language and how the language elements are structured.
The grammar is defined in a .langium file. Make sure that you have installed the VS Code extension for Langium. This extension provides syntax highlighting and code completion for .</description></item><item><title>4. Generate the AST</title><link>/docs/learn/workflow/generate_ast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/learn/workflow/generate_ast/</guid><description>After defining the grammar, you can generate the abstract syntax tree (AST) of your language. The AST is a tree representation of the source code that can be used to analyze and transform the code. The AST definition is generated by the Langium CLI. Simply call the following command on your terminal:
npm run langium:generate This line will call langium generate on your Langium project. The Langium CLI will generate the files in the src/generated directory.</description></item><item><title>5. Resolve cross-references</title><link>/docs/learn/workflow/resolve_cross_references/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/learn/workflow/resolve_cross_references/</guid><description>This step takes place after generating the AST. The AST definition was created and you are able to parse input files. But the AST is not complete yet. It contains cross-references that are not resolved. Cross-references are used to reference other elements in your language.
Problem Let&amp;rsquo;s illustrate the problem using the Hello-World example from the Yeoman generator:
person John person Jane Hello John! Hello Jane! The following syntax tree is generated by the Langium parser during the runtime.</description></item><item><title>6. Create validations</title><link>/docs/learn/workflow/create_validations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/learn/workflow/create_validations/</guid><description>After resolving the cross-references, you can assume that the syntax tree is complete. Now you can start with the validation of the input files. The validation process is a crucial part of the language engineering workflow. The parser ensures the syntactic correctness of the input files. The validation process ensures the semantic correctness of the input files.
Example Let&amp;rsquo;s consider the Hello-World example from the Yeoman generator. One semantic of this language could be that each declared person must be greeted at most once.</description></item><item><title>7. Generate artifacts</title><link>/docs/learn/workflow/generate_everything/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/learn/workflow/generate_everything/</guid><description>The syntax was ensured. The semantics were checked. Your workspace is free of errors. Now the AST is a valid representation of your input file written in your language. It is time to generate some cool stuff!
Depending on your domain and on your requirements there are different ways to generate artifacts from your AST.
How to write the generator? The simplest way is to generate text into a string.</description></item></channel></rss>