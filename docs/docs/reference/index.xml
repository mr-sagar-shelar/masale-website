<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference on Langium</title>
    <link>//localhost:1313/docs/reference/</link>
    <description>Recent content in Reference on Langium</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="//localhost:1313/docs/reference/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Glossary</title>
      <link>//localhost:1313/docs/reference/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/docs/reference/glossary/</guid>
      <description>Anyone who is new to DSL development should carefully read the following primer on the terms we are using in our documentation:
abstract syntax tree: A tree of elements that represents a text document. Each element is a simple JS object that combines multiple input tokens into a single object. Commonly abbreviated as AST.
document: An abstract term to refer to a text file on your file system or an open editor document in your IDE.</description>
    </item>
    
    <item>
      <title>Grammar Language</title>
      <link>//localhost:1313/docs/reference/grammar-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/docs/reference/grammar-language/</guid>
      <description>Language Declaration  Import of other grammar languages   Terminal Rules  Return Types Hidden Terminal Rules   Parser Rules  Declaration The Entry Rule Extended Backus-Naur Form Expressions  Cardinalities Groups Alternatives Keywords Assignments Cross-References Unassigned Rule Calls Unordered Groups Simple Actions Tree-Rewriting Actions   Data Type Rules Rule Fragments Guard Conditions More Examples   More on Terminal Rules  Extended Backus-Naur Form Terminals  Terminal Groups Terminal Alternatives Character Range Wildcard Token Until Token Negated Token Terminal Rule Calls   Terminal Fragments       The grammar language describes the syntax and structure of your language.</description>
    </item>
    
    <item>
      <title>Configuration via Services</title>
      <link>//localhost:1313/docs/reference/configuration-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/docs/reference/configuration-services/</guid>
      <description>Langium supports the configuration of most aspects of your language and language server via a set of services. Those services are configured by modules, which are essentially mappings from a service name to its implementation.
We can separate services and modules into two main categories:
Shared Services    The shared services are services that are shared across all Langium languages. In many applications there is only one Langium language, but the overall structure of the services is the same.</description>
    </item>
    
    <item>
      <title>Document Lifecycle</title>
      <link>//localhost:1313/docs/reference/document-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/docs/reference/document-lifecycle/</guid>
      <description>LangiumDocument is the central data structure in Langium that represents a text file of your DSL. Its main purpose is to hold the parsed Abstract Syntax Tree (AST) plus additional information derived from it. After its creation, a LangiumDocument must be &amp;ldquo;built&amp;rdquo; before it can be used in any way. The service responsible for building documents is called DocumentBuilder.
A LangiumDocument goes through seven different states during its lifecycle:
 Parsed when an AST has been generated from the content of the document.</description>
    </item>
    
    <item>
      <title>Semantic Model Inference</title>
      <link>//localhost:1313/docs/reference/semantic-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/docs/reference/semantic-model/</guid>
      <description>When AST nodes are created during the parsing of a document, they are given a type. The language grammar dictates the shape of those types and how they might be related to each other. All types form the semantic model of your language. There are two ways by which Langium derives semantic model types from the grammar, by inference and by declaration.
Inference is the default behavior in Langium. During the generation of the semantic model types, Langium infers the possible types directly from the grammar rules.</description>
    </item>
    
  </channel>
</rss>
